######For LOOPs

for local_var in <collection>:
    <code to do>

shoppinglist = ['Apple', 'Berry', 'Juice']

for fruit in shoppinglist:
    print('I want to purchase {}.'.format(fruit))





    #####################Range
    range(10)
    range(0,10)  #can take up to 3 int values, 1st and 2nd numbers list within that range, 3rd number makes it a step value for the numbers between 1st and 2nd
    list(range(10))



for x in list(range(5))
print(x)



####
test number, grab letter, if odd or even upper or lower case, thena dd to string

Use python to produce code below that will perform the following:

Given a mixed case string as parameter s
Capitalize every letter with an even index within the string.
Lowercase every letter with an odd index within the string.
Return the resulting string.
Example - Given: "ABCDEF ghijkl" Return: "AbCdEf gHiJkL"


def leetString(s):
    empty = []
    for index in range(len(s)):
        if index % 2 == 0:
            empty.append(s[index].upper())
        else:
            empty.append(s[index].lower())
    return ''.join(empty)
    
    
    ANOTHER WAY###########
    
    def leetString(s):
    answer = ''
    num = 0
    for c in s:
        if num % 2 == 0:
            answer += c.upper()
        else:
            answer += c.lower()
        num += 1
    return answer
    
    YET ANOTHER WAY############
    
    ############################
    #######################
    ################################
    
    FILE IO
    
    fp = open('/etc/passwd')

    fp.close()
    
    fp = open('/etc/passwd','r')

fp.read() #reads entire file as one large string

fp.readline() #gives list variable

fp.readlines()

fp = open('text.txt','w') ##'w' is write 'r' read and 'a' is append

fp.write('some line' + '\n') #creates new line, takes string data type

fp.writelines() #deals with list variable

fp.flush() #writes everything right now, effectively save function

rm.passwd.txt #rm. removes something

for line in fp: #iterating over a file object
    fo.write(line.upper()) #.upper not needed just demonstrating add on
    
    
    
  ###############################################################
  atuple = []
def make_tuple():
    for num in range(0,101,10):
        if num % 10 == 0:
            atuple.append(num)
    del atuple[0]
    return tuple(atuple)

print(make_tuple()) #dont put into test engine







    #0-100 multiples of 10, 100 % 10 == 0
    #tuple()
    
    
    ##############################################################
    
    13-1 - Python Activity
10
coding python core
def make_tuple(a,b):
    '''
    Returns a tuple of the multiples of 10 from a to b inclusive.
    Args:
        None
    Returns:
        tuple: a tuple of the multiples of 10 from a to b inclusive
    
    
    def make_tuple(a,b):
    atuple = []
    for num in range(a,b + 1):
        if num % 10 == 0:
            atuple.append(num)
        
    return tuple(atuple)

print(make_tuple(100,200)) #dont put into test engine


#########################################
14 - Python Activity
10
coding python core
def strings():
    '''
    Returns a tuple of the following strings:

    (empty string)

    Physics is the universe's operating system

    Args:
        None
    Returns:
        tuple: a tuple of strings
     '''
    pass
    
    
    def strings():
    atuple = ['Physics is the universe\'s operating system']
    btuple = []
    return tuple(btuple + atuple)
    
    
    ################################################
    
    
16 - Python Activity
10
coding python core
def reverse_string(strng):
    '''
    Returns a copy of the given string reversed
    Args:
        strng (str): a string of alphanumeric characters
    Returns:
        str: a copy of the given string reversed
    '''    
    pass
    
    def reverse_string(strng):
    strng = strng[::-1]
    return strng
